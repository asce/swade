/*
    SWADE is a lightweight WYSIWYG editor developed for SWAD platform.
    Copyright (C) 2013 - David Medina Godoy - asce88@gmail.com

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

*/


var swade_app = {};

function SwadeManager(){
}

SwadeManager.init = function(swade_app_object){

    var scripts= document.getElementsByTagName('script');
    for(var i = 0; i < scripts.length; i++){
	var script_str = scripts[i].getAttribute('src');
	if(script_str){
	    if(script_str.match('swade.js')){
		swade_app_object.path = scripts[i].src.split('?')[0];      // remove any ?query
		swade_app_object.path = swade_app_object.path.split('/').slice(0, -1).join('/')+'/';  // remove last filename 
	    }
	}
    }
    swade_app_object.focus = null;
    swade_app.initialized = true;
    swade_app_object.swade_data = new Array();
    swade_app.targets = new Array();
    swade_app_object.msie_selection = null;
    document._swade_onclick = document.onclick;



    swade_app_object.onclick_function = function(){
	if(this.navigator == 'MSIE')
	    this.msie_selection = SwadeManager.saveSelection();
	var elem = document.activeElement;
	var index = elem.getAttribute('data-swade-index');
	if(index){//Si se ha seleccionado editor
	    if(this.focus!=elem){
		if(this.focus)
		    this.swade_data[this.focus.getAttribute('data-swade-index')].panel.lock();
		this.swade_data[index].panel.unlock();
		this.focus = elem;
	    }
	}else{//Si no se ha seleccionado editor
            if(this.focus)//Si hay un editor previamente seleccionado
		if(this.swade_data[this.focus.getAttribute('data-swade-index')].panel.dom_panel!=this.clicked_panel){ 
		    this.swade_data[this.focus.getAttribute('data-swade-index')].panel.lock();
		    this.focus = null;
		}
	}
	this.clicked_panel=null;
    }





    document.onclick = function(e){swade_app_object.onclick_function(e);if(this._swade_onclick)this._swade_onclick();}
    swade_app_object.clicked_panel=null;
    var div_dom_elem = document.createElement('div');
    div_dom_elem.innerHTML = '<link rel="stylesheet" type="text/css" href="'+swade_app_object.path+'swade.css"/>';
    document.head.appendChild(div_dom_elem.firstChild);

    
    var d = document.createElement('div');
    d.innerHTML='<head><title>Select Symbol</title></head><table><tr><td>&#913;</td><td>&#914;</td><td>&#915;</td><td>&#916;</td><td>&#917;</td><td>&#918;</td><td>&#919;</td><td>&#920;</td><td>&#921;</td><td>&#922;</td><td>&#923;</td><td>&#924;</td><td>&#925;</td><td>&#926;</td><td>&#927;</td><td>&#928;</td><td>&#929;</td><td></td><td>&#931;</td><td>&#932;</td><td>&#933;</td><td>&#934;</td><td>&#935;</td><td>&#936;</td><td>&#937;</td></tr><tr><td>&#945;</td><td>&#946;</td><td>&#947;</td><td>&#948;</td><td>&#949;</td><td>&#950;</td><td>&#951;</td><td>&#952;</td><td>&#953;</td><td>&#954;</td><td>&#955;</td><td>&#956;</td><td>&#957;</td><td>&#958;</td><td>&#959;</td><td>&#960;</td><td>&#961;</td><td>&#962;</td><td>&#963;</td><td>&#964;</td><td>&#965;</td><td>&#966;</td><td>&#967;</td><td>&#968;</td><td>&#969;</td><tr><td>&#977;</td><td>&#978;</td><td>&#982;</td></tr></tr><tr><td>&#8704;</td><td>&#8706;</td><td>&#8707;</td><td>&#8709;</td><td>&#8711;</td><td>&#8712;</td><td>&#8713;</td><td>&#8715;</td><td>&#8719;</td><td>&#8721;</td><td>&#8722;</td><td>&#8727;</td><td>&#8730;</td><td>&#8733;</td><td>&#8734;</td><td>&#8736;</td><td>&#8743;</td><td>&#8744;</td><td>&#8745;</td><td>&#8746;</td><td>&#8747;</td><td>&#8756;</td><td>&#8764;</td><td>&#8773;</td><td>&#8776;</td></tr><tr><td>&#8800;</td><td>&#8801;</td><td>&#8804;</td><td>&#8805;</td><td>&#8834;</td><td>&#8835;</td><td>&#8836v;</td><td>&#8838;</td><td>&#8839;</td><td>&#8853;</td><td>&#8855;</td><td>&#8869;</td><td>&#8901;</td></tr></table>';

    var a = d.getElementsByTagName('td');
    for(i=0;i<a.length;i++){
            if(a[i].innerHTML){

		a[i].setAttribute('onclick','this.parentNode.parentNode.parentNode.parentNode.parentNode.style.visibility="hidden";SwadeManager.restoreSelection(swade_app.selection);SwadeManager.pasteHtmlAtCaret(this.innerHTML);');
		a[i].style.cursor='pointer';
            }

        swade_app_object.symbols_dialog = new SwadeDialog('Select Symbol',d.innerHTML,40,40);
	if(navigator.userAgent.search('MSIE')>=0)
	    swade_app_object.navigator = 'MSIE';
	else
	    swade_app_object.navigator = 'other';
    }

    swade_app_object.hash = {};
    swade_app_object.hash['formatBlock'] = {}
    swade_app_object.hash['formatBlock']['p'] = 1; 
    swade_app_object.hash['formatBlock']['pre'] = 2;
    swade_app_object.hash['formatBlock']['h6'] = 3; 
    swade_app_object.hash['formatBlock']['h5'] = 4;
    swade_app_object.hash['formatBlock']['h4'] = 5;
    swade_app_object.hash['formatBlock']['h3'] = 6;
    swade_app_object.hash['formatBlock']['h2'] = 7;
    swade_app_object.hash['formatBlock']['h1'] = 8;

    swade_app_object.hash['fontName'] = {};
    swade_app_object.hash['fontName']['serif'] = 1;
    swade_app_object.hash['fontName']['monospace'] = 2;

}

SwadeManager.makeSwade = function(dom_elem,target_index)
{
    //If the DOM element we want to edit exists
    if(dom_elem)
    {
            try {
                document.execCommand("styleWithCSS", 0, true);
            } catch (e) {
                try {
                    document.execCommand("useCSS", 0, false);//Revisar en internet explorer
                } catch (e) {
                    try {
                        document.execCommand('styleWithCSS', false, true);
                    }
                    catch (e) {
                    }
                }
            }


	dom_elem.style.border='1px solid black';
	dom_elem.style.backgroundColor='white';

        var buttons_container = document.createElement('div');

        buttons_container.innerHTML=''+
            '<div class="swade-buttons-panel" style="display: block;text-align:center;margin:auto;padding-top:5px;max-width:500px;">'+
	    '<button class="swade-button" data-tag="bold" title="Click to Bold"><img src="'+swade_app.path+'icons/bold.png"/></button>'+
	    '<button class="swade-button" data-tag="italic" title="Click to Italic"><img src="'+swade_app.path+'icons/italic.png"/></button>'+
	    '<button class="swade-button" data-tag="underline" title="Click to Underline"><img src="'+swade_app.path+'icons/underline.png"/></button>'+
	    '<button class="swade-button" data-tag="strikeThrough" title="Click to Strikethrough"><img src="'+swade_app.path+'icons/strikethrough.png"/></button>'+
	    '<button class="swade-button" data-tag="removeFormat" title="Remove Format" ><img src="'+swade_app.path+'icons/remove-format.png"/></button>'+
	    
	    '<button class="swade-button" data-tag="indent" title="Click to Indent Text"><img src="'+swade_app.path+'icons/indent-right.png"/></button>'+
	    '<button class="swade-button" data-tag="outdent" title="Click to Outdent Text"><img src="'+swade_app.path+'icons/indent-left.png"/></button>'+
	    '<button class="swade-button" data-tag="justifyLeft" title="Left Align"><img src="'+swade_app.path+'icons/align-left.png"/></button>'+
	    '<button class="swade-button" data-tag="justifyCenter" title="Center Align"><img src="'+swade_app.path+'icons/align-justify.png"/></button>'+
	    '<button class="swade-button" data-tag="justifyRight" title="Right Align"><img src="'+swade_app.path+'icons/align-right.png"/></button>'+
	    '<button class="swade-button" data-tag="insertUnorderedList" title="Insert Unordered List" ><img src="'+swade_app.path+'icons/list-ul.png"/></button>'+
	    '<button class="swade-button" data-tag="insertOrderedList" title="Insert Ordered List" ><img src="'+swade_app.path+'icons/list-ol.png"/></button>'+
	    '<button class="swade-button" data-tag="subscript" title="Click to Subscript"><img src="'+swade_app.path+'icons/subscript.png"/></button>'+
	    '<button class="swade-button" data-tag="superscript" title="Click to Superscript"><img src="'+swade_app.path+'icons/superscript.png"/></button>'+
	    '<button class="swade-button" data-tag="createLink" title="Add Link"><img src="'+swade_app.path+'icons/link.png"/></button>'+
	    '<button class="swade-button" data-tag="unlink" title="Remove Link"><img src="'+swade_app.path+'icons/unlink.png"/></button>'+
	    '<button class="swade-button" data-tag="insertImage" title="Insert Image"><img src="'+swade_app.path+'icons/picture.png"/></button>'+
	    '<span class="swade-select" ><select style="color:black;" data-tag="formatBlock">'+
	    '<option value="p" style="display:none">Format Text</option>'+
	    '<option value="p">paragraph</option>'+
	    '<option value="pre">pre</option>'+
	    '<option value="h6">heading 6</option>'+
	    '<option value="h5">heading 5</option>'+
	    '<option value="h4">heading 4</option>'+
	    '<option value="h3">heading 3</option>'+
	    '<option value="h2">heading 2</option>'+
	    '<option value="h1">heading 1</option>'+
	    '</select></span>'+
	    '<span class="swade-select" ><select style="color:black;" data-tag="fontName">'+
	    '<option value="serif" style="display:none">Font Family</option>'+
	    '<option value="serif">Serif</option>'+
	    '<option value="monospace">Monospace</option>'+
	    '</select></span>'+
	    '<button class="swade-button" data-tag="insertSymbol" title="Insert HTML Symbol"><img src="'+swade_app.path+'icons/symbols.png"/></button>'+
            '<button class="swade-button" data-tag="insertLatex" title="Insert TeX Formula"><img src="'+swade_app.path+'icons/texs.png"/></button>'+
	    '<button class="swade-button" data-tag="viewHTML" title="Edit HTML"><img src="'+swade_app.path+'icons/code.png"/></button>'+            
	    '</div>';

	buttons_container.firstElementChild.setAttribute('data-swade-index',target_index);
        dom_elem.setAttribute('data-swade-index',target_index);

	//dom_elem.panel = buttons_container.firstElementChild; 
	swade_app.swade_data[target_index].panel = new SwadePanel(buttons_container.firstElementChild,dom_elem);

	var parent = dom_elem.parentNode;

	if(parent.lastchild == dom_elem)
	{
	    parent.appendChild(buttons_container.firstElementChild);//parent.appendChild(buttons_container);
	}
	else
	{
	    parent.insertBefore(buttons_container.firstElementChild, dom_elem.nextSibling);//parent.insertBefore(buttons_container, dom_elem.nextSibling);
	}


	//For each of them...
	for(var i=0, l=swade_app.swade_data[target_index].panel.buttons.length; i<l; i++){
	    //We bind the click event
	    swade_app.swade_data[target_index].panel.buttons[i].onclick = function(){return false;};
	    swade_app.swade_data[target_index].panel.buttons[i].addEventListener('click',function(e){
		
		if(!e) e = window.event;
		swade_app.clicked_panel = this.parentNode;


		//Code here...
		var tag = this.getAttribute('data-tag');
		switch(tag)
		{

		case 'createLink':

		    var sel = SwadeManager.saveSelection();
		    var link = prompt('Please specify the link.');
		    SwadeManager.restoreSelection(sel);
		    document.execCommand('createLink', false, link);
		break;
		case 'unlink':
		    document.execCommand('unlink', false, false);
		break;
	    
		case 'insertImage':
		    var src = prompt('Please specify the link of the image.');
		    var sel = document.selection;
		    if (sel) {
			var textRange = sel.createRange();
			document.execCommand('insertImage', false, src);
			textRange.collapse(false);
			textRange.select();
		    } else {
			document.execCommand('insertImage', false, src);
		    }

		break;
		case 'viewHTML':
		    if(swade_app.navigator=='MSIE'){
			var args = new Object(); 
			args.opener = window;
			args.target = swade_app.swade_data[this.parentNode.getAttribute('data-swade-index')].panel.editor;
			args.editor_content = dom_elem.innerHTML;
			var sFeatures = '';
			window.showModalDialog(swade_app.path+'viewHTML.html',args , sFeatures)
			
		    }else{

			var dataitem = SwadeManager.popupwindow(swade_app.path+'viewHTML.html', 'Edit Source', 500, 500);
			dataitem.opener = window;
			dataitem.target = swade_app.swade_data[this.parentNode.getAttribute('data-swade-index')].panel.editor;
			dataitem.editor_content=dom_elem.innerHTML;

		    }

		    
		break;
		case 'insertLatex':
		    SwadeManager.insertLatex("",false);

		break;
		case 'insertSymbol':

		    swade_app.selection = SwadeManager.saveSelection();
		    swade_app.symbols_dialog.alignWithElem(this.getBoundingClientRect());
		    swade_app.symbols_dialog.change_visibility();  

		break;
		case 'indent':
		    if(swade_app.navigator=='MSIE')
			SwadeManager.restoreSelection(swade_app.msie_selection);
		    document.execCommand('indent', false, null);
		break;
		case 'outdent':
		    if(swade_app.navigator=='MSIE')
			SwadeManager.restoreSelection(swade_app.msie_selection);
		    document.execCommand('outdent', false, null);
		break;
		default:
		    var value = null;

                    document.execCommand(tag, false, value);
		}
		swade_app.swade_data[this.parentNode.getAttribute('data-swade-index')].panel.refreshSelection();
		
		if(e.preventDefault)
		    e.preventDefault();
		else e.returnValue = false;
		
	    },false);

	}
        for(var i=0, l=swade_app.swade_data[target_index].panel.selects.length; i<l; i++){

            swade_app.swade_data[target_index].panel.selects[i].addEventListener('click',function(e){
		if(!e) e = window.event;
                swade_app.clicked_panel = this.parentNode.parentNode;
                
                if(e.preventDefault)
                    e.preventDefault();
		else e.returnValue = false;
	    },false);
                                     
            swade_app.swade_data[target_index].panel.selects[i].addEventListener('change',function(e){
		if(!e) e = window.event;
		swade_app.clicked_panel = this.parentNode.parentNode;
		var tag = this.getAttribute('data-tag');
                switch(tag)
                {
                case 'formatBlock':
		    document.execCommand('formatBlock', false, '<'+this.value+'>');
		break;
		case 'fontName':
		    document.execCommand('fontName', false, this.value);
		break;
		}
                
                if(e.preventDefault)
                    e.preventDefault();
		else e.returnValue = false;

	    },false);

	}


        dom_elem.setAttribute('contenteditable', true);
	

    }
    return dom_elem;
};

SwadeManager.insertLatex = function(formula,bool_edit){


    if(swade_app.navigator=='MSIE'){

	var args = new Object(); 
	args.opener = window;

	args.formula = formula;
	args.sel = SwadeManager.saveSelection();

	var sFeatures = '';
	var tex_img = window.showModalDialog(swade_app.path+'tex_editor/index.html',args , sFeatures);
	if(bool_edit){
	    var d = document.createElement('div');
	    d.innerHTML = tex_img;
	    d = d.firstChild;
	    swade_app.selected_tex_object.parentNode.insertBefore(d,swade_app.selected_tex_object);
	    swade_app.selected_tex_object.parentNode.removeChild(swade_app.selected_tex_object);
	    delete swade_app.selected_tex_object;
	}else 
	    SwadeManager.pasteHtmlAtCaret(tex_img);
	
	
    }else{
	var dataitem = SwadeManager.popupwindow(swade_app.path+'tex_editor/index.html', 'LaTeX Editor', 800, 500);
	dataitem.opener = window;
	dataitem.formula = formula;

	dataitem.sel = SwadeManager.saveSelection();

	dataitem.onbeforeunload = function(){
	    if(window.tex){
		if(bool_edit){
		    var d = document.createElement('div');
		    d.innerHTML = window.tex;
		    d = d.firstChild;
		    swade_app.selected_tex_object.parentNode.insertBefore(d,swade_app.selected_tex_object);
		    swade_app.selected_tex_object.parentNode.removeChild(swade_app.selected_tex_object);
		    delete swade_app.selected_tex_object;
		}else
		    SwadeManager.pasteHtmlAtCaret(window.tex);

	    }
	    
	    window.tex='';
	};
    }
}



SwadeManager.saveSelection = function() {
    if (window.getSelection) {
        sel = window.getSelection();
        if (sel.getRangeAt && sel.rangeCount) {
            var ranges = [];
            for (var i = 0, len = sel.rangeCount; i < len; ++i) {
                ranges.push(sel.getRangeAt(i));
            }
            return ranges;
        }
    } else if (document.selection && document.selection.createRange) {
        return document.selection.createRange();
    }
    return null;
}

SwadeManager.restoreSelection = function(savedSel) {
    if (savedSel) {
        if (window.getSelection) {
            sel = window.getSelection();
            sel.removeAllRanges();
            for (var i = 0, len = savedSel.length; i < len; ++i) {
               sel.addRange(savedSel[i]);
            }
        } else if (document.selection && savedSel.select) {
            savedSel.select();
        }
    }
}

SwadeManager.pasteHtmlAtCaret = function(html) {
    var sel, range;
    if (window.getSelection) {
        // IE9 and non-IE
        sel = window.getSelection();
        if (sel.getRangeAt && sel.rangeCount) {
            range = sel.getRangeAt(0);
            range.deleteContents();

            // Range.createContextualFragment() would be useful here but is
            // non-standard and not supported in all browsers (IE9, for one)
            var el = document.createElement("div");
            el.innerHTML = html;
            var frag = document.createDocumentFragment(), node, lastNode;
            while ( (node = el.firstChild) ) {
                lastNode = frag.appendChild(node);
            }
            range.insertNode(frag);

            // Preserve the selection
            if (lastNode) {
                range = range.cloneRange();
                range.setStartAfter(lastNode);
                range.collapse(true);
                sel.removeAllRanges();
                sel.addRange(range);
            }
        }
    } else if (document.selection && document.selection.type != "Control") {
        // IE < 9
        document.selection.createRange().pasteHTML(html);
    }
}

SwadeManager.popupwindow = function(url, title, w, h) {
  var left = (screen.width/2)-(w/2);
  var top = (screen.height/2)-(h/2);
  return window.open(url, title, 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=yes, resizable=yes, copyhistory=no, width='+w+', height='+h+', top='+top+', left='+left);
}

SwadeManager.setSwadeByClassName = function(class_name){

    var targets = document.getElementsByClassName(class_name);
    SwadeManager.setSwade(targets);

}

SwadeManager.setSwadeById = function(id){

    var target = document.getElementById(id);
    var targets = new Array();
    targets.push(target);
    SwadeManager.setSwade(targets);

}

SwadeManager.setSwadeByQuery = function(query){

    var targets = document.querySelectorAll(query);
    SwadeManager.setSwade(targets);

}


SwadeManager.setSwade = function(selected_targets){
    //console.log(targets);
    if(!selected_targets) return;
    if(!swade_app.initialized)
	SwadeManager.init(swade_app);

    var targets = new Array();
    //Añadimos a targets los objetos no añadidos previamente
    for(var i = 0; i < selected_targets.length; i++){
	if(swade_app.targets.indexOf(selected_targets[i])==-1){ 
	    targets.push(selected_targets[i]); //Si el target no se ha añadido previamente lo añadimos
	    swade_app.targets.push(selected_targets[i]);
	}

    }
  var keydown_function = function(e) {

      //if(swade_app.navigator != 'MSIE'){
	  if(!e) e = window.event;
	  swade_app.swade_data[this.getAttribute('data-swade-index')].panel.refreshSelection(); //Actualizar selección en panel
	  if(e.which == 9) {//tab_keydown, problem with IE 
	      document.execCommand('indent', false, null);
              
              if(e.preventDefault)
		  e.preventDefault();
	      else e.returnValue = false;
	  }
    //}
  };
    
  var click_function = function(e) {
      if(!e) e = window.event;
      //swade_app.focusEditor(this.getAttribute('data-swade-index'));
      if(swade_app.tex_code_selected){
	  //console.log(swade_app.tex_code_selected);
	  SwadeManager.insertLatex(swade_app.tex_code_selected,true);
	  delete swade_app.tex_code_selected;
	  }


      swade_app.swade_data[this.getAttribute('data-swade-index')].panel.refreshSelection(); //Actualizar selección en panel
  }


  for(var i = 0;i < targets.length; i++){
      if(targets[i].tagName=='TEXTAREA' || targets[i].tagName=='DIV'){
	  swade_app.swade_data[i] = new Object();
	  var r = targets[i].getBoundingClientRect();
      }
      if(targets[i].tagName=='TEXTAREA'){
	  var divElem = document.createElement('div');
	  divElem.innerHTML = targets[i].innerHTML;
	  divElem.style.textAlign = targets[i].style.textAlign;
	  divElem.style.padding = '10px';
	  divElem.style.margin = 'auto';
	  targets[i].style.display='none';
	  targets[i].parentNode.insertBefore(divElem, targets[i]);
	  divElem.style.width = r.width+'px';
	  divElem.style.minHeight = r.height+'px';

	  
	  var elem = targets[i].parentElement;
	  while(elem){
	      if(elem.tagName=="FORM"){
		      swade_app.swade_data[i].form = elem;
		  var forms_input = elem.getElementsByTagName('input');
		  for(j = 0;j < forms_input.length; j++){
		      if(forms_input[j].type=='submit')
			  swade_app.swade_data[i].input_submit = forms_input[j];
		  }

		  if(swade_app.swade_data[i].form)
		      if(swade_app.swade_data[i].input_submit){
			  swade_app.swade_data[i].input_submit.setAttribute('onclick','return SwadeManager.setTextAreaBeforeSubmit('+i+');');
		      }
	      }
	      elem = elem.parentElement;
	  }
	  SwadeManager.makeSwade(divElem,i);
	  divElem.addEventListener('keydown', keydown_function, false);
	  divElem.addEventListener('click', click_function, false);
	  swade_app.swade_data[i].panel.lock();
      }else if(targets[i].tagName=='DIV'){
	  
	  targets[i].style.margin='auto';
	  targets[i].style.padding='10px';
	  targets[i].style.width = r.width+'px';
	  targets[i].addEventListener('keydown', keydown_function,false);
	  targets[i].addEventListener('click', click_function, false);
          SwadeManager.makeSwade(targets[i],i);
	  swade_app.swade_data[i].panel.lock();
      }

  }

}


SwadeManager.setTextAreaBeforeSubmit = function(i){

swade_app.targets[i].innerHTML = swade_app.swade_data[i].panel.editor.innerHTML;
return true;
}


SwadeManager.setOnDOMLoaded = function(fun){

//window.onload = fun;

SwadeManager.bindReady(fun);

return true;
}

SwadeManager.bindReady = function(handler){

    var called = false

    function ready() { 
	if (called) return
	called = true
	handler()
	}

    if ( document.addEventListener ) { // native event
	document.addEventListener( "DOMContentLoaded", ready, false )
	} else if ( document.attachEvent ) {  // IE

	    try {
		var isFrame = window.frameElement != null
		} catch(e) {}

	    // IE, the document is not inside a frame
	    if ( document.documentElement.doScroll && !isFrame ) {
		function tryScroll(){
		    if (called) return
		    try {
			document.documentElement.doScroll("left")
			ready()
			} catch(e) {
			    setTimeout(tryScroll, 10)
			    }
		    }
		tryScroll()
		}

	    // IE, the document is inside a frame
	    document.attachEvent("onreadystatechange", function(){
		if ( document.readyState === "complete" ) {
		    ready()
		    }
		})
	    }

    // Old browsers
    if (window.addEventListener)
        window.addEventListener('load', ready, false)
    else if (window.attachEvent)
        window.attachEvent('onload', ready)
    else {
	var fn = window.onload // very old browser, copy old onload
	window.onload = function() { // replace by new onload and call the old one
	    fn && fn()
	    ready()
	    }
    }
}


function SwadeDialog(title,content,left,top){
d = document.createElement('div');
d.innerHTML="<div class='dialog' onclick='SwadeManager.restoreSelection(swade_app.selection);'><div class='titlebar'><div class='dialog_title'>"+title+"</div><div class='close_dialog_button' onclick='this.parentNode.parentNode.style.visibility=\"hidden\";SwadeManager.restoreSelection(swade_app.selection);'></div></div><div class='dialog_content'>"+content+"</div><div style='clear:both'></div></div>";
d = d.firstChild;
document.body.appendChild(d);
d.style.left = left+'px';
d.style.top = top+'px';
d.style.visibility = 'hidden';
this._dialog = d;

}
SwadeDialog.prototype.show = function(){

    this._dialog.style.visibility = 'visible';
    return this;
}
SwadeDialog.prototype.close = function(){

    this._dialog.style.visibility = 'hidden';

}
SwadeDialog.prototype.remove = function(){

    this._dialog.parentNode.removeChild(this._dialog);

}
SwadeDialog.prototype.change_visibility = function(){

    this._dialog.style.visibility = (this._dialog.style.visibility == 'hidden'?'visible':'hidden');

}

SwadeDialog.prototype.alignWithElem = function(rect){
    var rect_width = rect.right - rect.left;

	var dialog_width;
    if(this._dialog.getBoundingClientRect){
	var rect_dialog = this._dialog.getBoundingClientRect();
	dialog_width = rect_dialog.right - rect_dialog.left;
    }else{
	dialog_width = this._dialog.offsetRight - this._dialog.offsetLeft;
    }
    this._dialog.style.left = rect.left - (dialog_width - rect_width)/2+'px';
    this._dialog.style.top = rect.bottom+1+'px';
}

function SwadePanel(dom_panel,div_editor){
    this.dom_panel = dom_panel;
    this.buttons = this.dom_panel.querySelectorAll("button[data-tag]");
    this.selects = this.dom_panel.querySelectorAll("select[data-tag]");
    this.editor = div_editor;
    for(var i = 0; i < this.buttons.length; i++){
	this.buttons[i].onmousedown = function(){this.style.backgroundColor='white';};
	this.buttons[i].onmouseup = function(){this.style.backgroundColor='#EEE';};
    }

}

SwadePanel.prototype.refreshSelection = function(){
    var hash = {};
    var dataTag;
    var value, valueBool;
    for(var i = 0; i < this.buttons.length; i++){
	dataTag = this.buttons[i].getAttribute('data-tag');
	try{
	    valueBool = document.queryCommandState(dataTag);
	}catch(err){
	    valueBool = false;
	}
	hash[dataTag] = valueBool;
	
    }

    var button;

    for (var k in hash) {

	if (hash.hasOwnProperty(k)) {

	    var query = "[data-tag="+k+"]";
	    if(swade_app.navigator != 'MSIE'){
		button = this.dom_panel.querySelector(query);
		if(button){
		    //console.log(k+'==>'+hash[k]);
		    button.style.backgroundColor=(hash[k]==true?'#CCD0D0':'#EEE');
		}
	    }else{//IE ...
		var index = this.dom_panel.getAttribute('data-swade-index');
		var buttons = document.querySelectorAll(query);
		buttons[index].style.backgroundColor=(hash[k]==true?'#CCD0D0':'#EEE');

	    }
	}
    }
    /////////////////////////////////
    for(var i = 0; i < this.selects.length; i++){
	dataTag = this.selects[i].getAttribute('data-tag');
	try{
	    value = document.queryCommandValue(dataTag);
	}catch(err){
	    value = null;
	}
	if(value==null)
	    this.selects[i].selectedIndex = 0;
	else this.selects[i].selectedIndex = swade_app.hash[dataTag][value];
    }

}
SwadePanel.prototype.lock = function(){
    this.dom_panel.style.opacity=0.4;
    this.editor.style.border = "1px dashed gray";
    childNodes = this.dom_panel.querySelectorAll('[data-tag]');
    for(i = 0; i < childNodes.length; i++)
	childNodes[i].disabled = true;

}
SwadePanel.prototype.unlock = function(){
    this.dom_panel.style.opacity=1;
    this.editor.style.border = "1px solid black";
    childNodes = this.dom_panel.querySelectorAll('[data-tag]');
    for(i = 0; i < childNodes.length; i++)
        childNodes[i].disabled = false;
}




